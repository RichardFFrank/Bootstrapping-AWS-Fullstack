{
 "Resources": {
  "FileDetailsTable9895FBF8": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "KeySchema": [
     {
      "AttributeName": "id",
      "KeyType": "HASH"
     }
    ],
    "AttributeDefinitions": [
     {
      "AttributeName": "id",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "TableClass": "STANDARD_INFREQUENT_ACCESS"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/FileDetailsTable/Resource"
   }
  },
  "UploadBucket46C33933D9": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET",
        "POST",
        "PUT"
       ],
       "AllowedOrigins": [
        "*"
       ]
      }
     ]
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/UploadBucket + 46/Resource"
   }
  },
  "UploadBucket46PolicyB5DE5B90": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "UploadBucket46C33933D9"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "UploadBucket46C33933D9",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "UploadBucket46C33933D9",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/UploadBucket + 46/Policy/Resource"
   }
  },
  "UploadBucket46AutoDeleteObjectsCustomResourceBA55E1C1": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "UploadBucket46C33933D9"
    }
   },
   "DependsOn": [
    "UploadBucket46PolicyB5DE5B90"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/UploadBucket + 46/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "UploadBucket46Notifications2A1DDD53": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "UploadBucket46C33933D9"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:Put"
       ],
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "triggerHandler63D257A4",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "UploadBucket46AllowBucketNotificationsToAwsServiceStacktriggerHandler28D5CBC3AC851799"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/UploadBucket + 46/Notifications/Resource"
   }
  },
  "UploadBucket46AllowBucketNotificationsToAwsServiceStacktriggerHandler28D5CBC3AC851799": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "triggerHandler63D257A4",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "UploadBucket46C33933D9",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/UploadBucket + 46/AllowBucketNotificationsToAwsServiceStacktriggerHandler28D5CBC3"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "350185a1069fa20a23a583e20c77f6844218bd73097902362dc94f1a108f5d89.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs14.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "UploadBucket46C33933D9"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.350185a1069fa20a23a583e20c77f6844218bd73097902362dc94f1a108f5d89",
    "aws:asset:property": "Code"
   }
  },
  "lambdaFunctionhandlerServiceRoleD1374824": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/lambdaFunction.handler/ServiceRole/Resource"
   }
  },
  "lambdaFunctionhandlerServiceRoleDefaultPolicy6B158845": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "s3:PutObject"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "UploadBucket46C33933D9",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "lambdaFunctionhandlerServiceRoleDefaultPolicy6B158845",
    "Roles": [
     {
      "Ref": "lambdaFunctionhandlerServiceRoleD1374824"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/lambdaFunction.handler/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "lambdaFunctionhandler7EF31F19": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "0b02942c2b68f0ab2ab4e05dc4b14a5fc4d4d5810ad25981451c71815b1730cb.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "lambdaFunctionhandlerServiceRoleD1374824",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "BUCKET": {
       "Ref": "UploadBucket46C33933D9"
      },
      "DYNAMO": {
       "Ref": "FileDetailsTable9895FBF8"
      },
      "REGION": "us-east-1"
     }
    },
    "Handler": "lambdaFunction.handler",
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "lambdaFunctionhandlerServiceRoleDefaultPolicy6B158845",
    "lambdaFunctionhandlerServiceRoleD1374824"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/lambdaFunction.handler/Resource",
    "aws:asset:path": "asset.0b02942c2b68f0ab2ab4e05dc4b14a5fc4d4d5810ad25981451c71815b1730cb",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "dynamoDBFunctionhandlerServiceRoleE1E5C1E9": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dynamoDBFunction.handler/ServiceRole/Resource"
   }
  },
  "dynamoDBFunctionhandlerServiceRoleDefaultPolicy09CFAC93": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "s3:PutObject"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "UploadBucket46C33933D9",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "FileDetailsTable9895FBF8",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "dynamoDBFunctionhandlerServiceRoleDefaultPolicy09CFAC93",
    "Roles": [
     {
      "Ref": "dynamoDBFunctionhandlerServiceRoleE1E5C1E9"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dynamoDBFunction.handler/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "dynamoDBFunctionhandler5EF1F270": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "0b02942c2b68f0ab2ab4e05dc4b14a5fc4d4d5810ad25981451c71815b1730cb.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "dynamoDBFunctionhandlerServiceRoleE1E5C1E9",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "BUCKET": {
       "Ref": "UploadBucket46C33933D9"
      },
      "DYNAMO": {
       "Ref": "FileDetailsTable9895FBF8"
      },
      "REGION": "us-east-1"
     }
    },
    "Handler": "dynamoDBFunction.handler",
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "dynamoDBFunctionhandlerServiceRoleDefaultPolicy09CFAC93",
    "dynamoDBFunctionhandlerServiceRoleE1E5C1E9"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dynamoDBFunction.handler/Resource",
    "aws:asset:path": "asset.0b02942c2b68f0ab2ab4e05dc4b14a5fc4d4d5810ad25981451c71815b1730cb",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "triggerHandlerServiceRole9BF9A02A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/triggerHandler/ServiceRole/Resource"
   }
  },
  "triggerHandlerServiceRoleDefaultPolicy48D89528": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "s3:PutObject"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "UploadBucket46C33933D9",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "triggerHandlerServiceRoleDefaultPolicy48D89528",
    "Roles": [
     {
      "Ref": "triggerHandlerServiceRole9BF9A02A"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/triggerHandler/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "triggerHandler63D257A4": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "0b02942c2b68f0ab2ab4e05dc4b14a5fc4d4d5810ad25981451c71815b1730cb.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "triggerHandlerServiceRole9BF9A02A",
      "Arn"
     ]
    },
    "Handler": "triggerFunction.handler",
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "triggerHandlerServiceRoleDefaultPolicy48D89528",
    "triggerHandlerServiceRole9BF9A02A"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/triggerHandler/Resource",
    "aws:asset:path": "asset.0b02942c2b68f0ab2ab4e05dc4b14a5fc4d4d5810ad25981451c71815b1730cb",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "urlApiGatewayPermission": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "lambdaFunctionhandler7EF31F19",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGatewayPermission"
   }
  },
  "urlApiGateway03684FD7": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "urlApiGateway"
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/Resource"
   }
  },
  "urlApiGatewayDeploymentFF4DFCA1f4bd2e147a5b459853cfc83e4cf0e52b": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "RestApiId": {
     "Ref": "urlApiGateway03684FD7"
    },
    "Description": "Automatically created by the RestApi construct"
   },
   "DependsOn": [
    "urlApiGatewayproxyANYE71239E8",
    "urlApiGatewayproxyOPTIONS2EF06092",
    "urlApiGatewayproxy053DEEA7",
    "urlApiGatewayANY44CB05B2",
    "urlApiGatewayOPTIONS079FA49B"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/Deployment/Resource"
   }
  },
  "urlApiGatewayDeploymentStageprodB204213B": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "RestApiId": {
     "Ref": "urlApiGateway03684FD7"
    },
    "DeploymentId": {
     "Ref": "urlApiGatewayDeploymentFF4DFCA1f4bd2e147a5b459853cfc83e4cf0e52b"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/DeploymentStage.prod/Resource"
   }
  },
  "urlApiGatewayOPTIONS079FA49B": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "OPTIONS",
    "ResourceId": {
     "Fn::GetAtt": [
      "urlApiGateway03684FD7",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "urlApiGateway03684FD7"
    },
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'*'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/Default/OPTIONS/Resource"
   }
  },
  "urlApiGatewayproxy053DEEA7": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "urlApiGateway03684FD7",
      "RootResourceId"
     ]
    },
    "PathPart": "{proxy+}",
    "RestApiId": {
     "Ref": "urlApiGateway03684FD7"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/Default/{proxy+}/Resource"
   }
  },
  "urlApiGatewayproxyOPTIONS2EF06092": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "OPTIONS",
    "ResourceId": {
     "Ref": "urlApiGatewayproxy053DEEA7"
    },
    "RestApiId": {
     "Ref": "urlApiGateway03684FD7"
    },
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'*'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/Default/{proxy+}/OPTIONS/Resource"
   }
  },
  "urlApiGatewayproxyANYApiPermissionAwsServiceStackurlApiGatewayBF4AF6E4ANYproxyBA912F27": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "lambdaFunctionhandler7EF31F19",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "urlApiGateway03684FD7"
       },
       "/",
       {
        "Ref": "urlApiGatewayDeploymentStageprodB204213B"
       },
       "/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/Default/{proxy+}/ANY/ApiPermission.AwsServiceStackurlApiGatewayBF4AF6E4.ANY..{proxy+}"
   }
  },
  "urlApiGatewayproxyANYApiPermissionTestAwsServiceStackurlApiGatewayBF4AF6E4ANYproxy22F55FB5": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "lambdaFunctionhandler7EF31F19",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "urlApiGateway03684FD7"
       },
       "/test-invoke-stage/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/Default/{proxy+}/ANY/ApiPermission.Test.AwsServiceStackurlApiGatewayBF4AF6E4.ANY..{proxy+}"
   }
  },
  "urlApiGatewayproxyANYE71239E8": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "ANY",
    "ResourceId": {
     "Ref": "urlApiGatewayproxy053DEEA7"
    },
    "RestApiId": {
     "Ref": "urlApiGateway03684FD7"
    },
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "lambdaFunctionhandler7EF31F19",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/Default/{proxy+}/ANY/Resource"
   }
  },
  "urlApiGatewayANYApiPermissionAwsServiceStackurlApiGatewayBF4AF6E4ANYEBA58146": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "lambdaFunctionhandler7EF31F19",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "urlApiGateway03684FD7"
       },
       "/",
       {
        "Ref": "urlApiGatewayDeploymentStageprodB204213B"
       },
       "/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/Default/ANY/ApiPermission.AwsServiceStackurlApiGatewayBF4AF6E4.ANY.."
   }
  },
  "urlApiGatewayANYApiPermissionTestAwsServiceStackurlApiGatewayBF4AF6E4ANY7DF701D9": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "lambdaFunctionhandler7EF31F19",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "urlApiGateway03684FD7"
       },
       "/test-invoke-stage/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/Default/ANY/ApiPermission.Test.AwsServiceStackurlApiGatewayBF4AF6E4.ANY.."
   }
  },
  "urlApiGatewayANY44CB05B2": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "ANY",
    "ResourceId": {
     "Fn::GetAtt": [
      "urlApiGateway03684FD7",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "urlApiGateway03684FD7"
    },
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "lambdaFunctionhandler7EF31F19",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/urlApiGateway/Default/ANY/Resource"
   }
  },
  "dbApiGatewayPermission": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "dynamoDBFunctionhandler5EF1F270",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGatewayPermission"
   }
  },
  "dbApiGateway95CFC0BD": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "dbApiGateway"
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/Resource"
   }
  },
  "dbApiGatewayDeploymentA0784B604bb29279ee68b894a45b78cf7d85e6aa": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "RestApiId": {
     "Ref": "dbApiGateway95CFC0BD"
    },
    "Description": "Automatically created by the RestApi construct"
   },
   "DependsOn": [
    "dbApiGatewayproxyANYB1258942",
    "dbApiGatewayproxyOPTIONS2673A2C2",
    "dbApiGatewayproxy888DF1C9",
    "dbApiGatewayANYDF11A7EC",
    "dbApiGatewayOPTIONS5A5DC513"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/Deployment/Resource"
   }
  },
  "dbApiGatewayDeploymentStageprod6BE65734": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "RestApiId": {
     "Ref": "dbApiGateway95CFC0BD"
    },
    "DeploymentId": {
     "Ref": "dbApiGatewayDeploymentA0784B604bb29279ee68b894a45b78cf7d85e6aa"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/DeploymentStage.prod/Resource"
   }
  },
  "dbApiGatewayOPTIONS5A5DC513": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "OPTIONS",
    "ResourceId": {
     "Fn::GetAtt": [
      "dbApiGateway95CFC0BD",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "dbApiGateway95CFC0BD"
    },
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'*'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/Default/OPTIONS/Resource"
   }
  },
  "dbApiGatewayproxy888DF1C9": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "dbApiGateway95CFC0BD",
      "RootResourceId"
     ]
    },
    "PathPart": "{proxy+}",
    "RestApiId": {
     "Ref": "dbApiGateway95CFC0BD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/Default/{proxy+}/Resource"
   }
  },
  "dbApiGatewayproxyOPTIONS2673A2C2": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "OPTIONS",
    "ResourceId": {
     "Ref": "dbApiGatewayproxy888DF1C9"
    },
    "RestApiId": {
     "Ref": "dbApiGateway95CFC0BD"
    },
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'*'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/Default/{proxy+}/OPTIONS/Resource"
   }
  },
  "dbApiGatewayproxyANYApiPermissionAwsServiceStackdbApiGateway97BCD796ANYproxy6FC08FA9": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "dynamoDBFunctionhandler5EF1F270",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "dbApiGateway95CFC0BD"
       },
       "/",
       {
        "Ref": "dbApiGatewayDeploymentStageprod6BE65734"
       },
       "/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/Default/{proxy+}/ANY/ApiPermission.AwsServiceStackdbApiGateway97BCD796.ANY..{proxy+}"
   }
  },
  "dbApiGatewayproxyANYApiPermissionTestAwsServiceStackdbApiGateway97BCD796ANYproxy60CCCCC5": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "dynamoDBFunctionhandler5EF1F270",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "dbApiGateway95CFC0BD"
       },
       "/test-invoke-stage/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/Default/{proxy+}/ANY/ApiPermission.Test.AwsServiceStackdbApiGateway97BCD796.ANY..{proxy+}"
   }
  },
  "dbApiGatewayproxyANYB1258942": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "ANY",
    "ResourceId": {
     "Ref": "dbApiGatewayproxy888DF1C9"
    },
    "RestApiId": {
     "Ref": "dbApiGateway95CFC0BD"
    },
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "dynamoDBFunctionhandler5EF1F270",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/Default/{proxy+}/ANY/Resource"
   }
  },
  "dbApiGatewayANYApiPermissionAwsServiceStackdbApiGateway97BCD796ANYBC903820": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "dynamoDBFunctionhandler5EF1F270",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "dbApiGateway95CFC0BD"
       },
       "/",
       {
        "Ref": "dbApiGatewayDeploymentStageprod6BE65734"
       },
       "/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/Default/ANY/ApiPermission.AwsServiceStackdbApiGateway97BCD796.ANY.."
   }
  },
  "dbApiGatewayANYApiPermissionTestAwsServiceStackdbApiGateway97BCD796ANY57DDEF6F": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "dynamoDBFunctionhandler5EF1F270",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "dbApiGateway95CFC0BD"
       },
       "/test-invoke-stage/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/Default/ANY/ApiPermission.Test.AwsServiceStackdbApiGateway97BCD796.ANY.."
   }
  },
  "dbApiGatewayANYDF11A7EC": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "ANY",
    "ResourceId": {
     "Fn::GetAtt": [
      "dbApiGateway95CFC0BD",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "dbApiGateway95CFC0BD"
    },
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "dynamoDBFunctionhandler5EF1F270",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/dbApiGateway/Default/ANY/Resource"
   }
  },
  "reactfrontendappRole40EB7C17": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "amplify.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/react-frontend-app/Role/Resource"
   }
  },
  "reactfrontendapp87E685F2": {
   "Type": "AWS::Amplify::App",
   "Properties": {
    "Name": "react-frontend-app",
    "BasicAuthConfig": {
     "EnableBasicAuth": false
    },
    "EnvironmentVariables": [
     {
      "Name": "REACT_APP_PRESIGNED_URL_SOURCE",
      "Value": {
       "Fn::Join": [
        "",
        [
         "https://",
         {
          "Ref": "urlApiGateway03684FD7"
         },
         ".execute-api.",
         {
          "Ref": "AWS::Region"
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "urlApiGatewayDeploymentStageprodB204213B"
         },
         "/"
        ]
       ]
      }
     },
     {
      "Name": "REACT_APP_DYNAMO_LAMBDA",
      "Value": {
       "Fn::Join": [
        "",
        [
         "https://",
         {
          "Ref": "dbApiGateway95CFC0BD"
         },
         ".execute-api.",
         {
          "Ref": "AWS::Region"
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "dbApiGatewayDeploymentStageprod6BE65734"
         },
         "/"
        ]
       ]
      }
     }
    ],
    "IAMServiceRole": {
     "Fn::GetAtt": [
      "reactfrontendappRole40EB7C17",
      "Arn"
     ]
    },
    "OauthToken": "{{resolve:secretsmanager:github-token-amplify:SecretString:::}}",
    "Repository": "https://github.com/RichardFFrank/AWSService-Frontend-React-App"
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/react-frontend-app/Resource"
   }
  },
  "reactfrontendappmain0C64D53B": {
   "Type": "AWS::Amplify::Branch",
   "Properties": {
    "AppId": {
     "Fn::GetAtt": [
      "reactfrontendapp87E685F2",
      "AppId"
     ]
    },
    "BranchName": "main",
    "EnableAutoBuild": true,
    "EnablePullRequestPreview": true
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/react-frontend-app/main/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21RTU8CMRD9Ldy7xcWDHgWMJ40EvZNhW2CgX9m24KbZ/26/EGM8zZs303lvpjP6MKOhncDFNh07NQK3NHw46E4kUpvABgVSs0h+wlZwstypDEZi72lY+O7EXSIrKmGlBXbDja55SRZg42sBcsuAhtiz4r1Ea1Er8uJV5xKI9BWPBEHSsNZFPcebQEHJzQas5c7SeQoEDO7B8QsMNLxmrTW3bm4wz6jwmRuhB8lVXuFXFg+wz2oFxH7t+44n6+SNu4NmqVjRqtdfw7Wljs94JCCNwN2Q15wbky/Sg+oO40huL7x1Wv434E8pCp2R8Z7kFZM1VPvU/+6d8XmHpVYMy9XaBoQ5AL2bPNXPnaZYLdViSK5+LCnNOD3a6bl9pO2MtpOjRWx6rxxKTtclfgNK5baRMgIAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "AwsServiceStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "urlApiGatewayEndpoint34016AD2": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "urlApiGateway03684FD7"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "urlApiGatewayDeploymentStageprodB204213B"
      },
      "/"
     ]
    ]
   }
  },
  "dbApiGatewayEndpoint9606DF74": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "dbApiGateway95CFC0BD"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "dbApiGatewayDeploymentStageprod6BE65734"
      },
      "/"
     ]
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}